// Generated by CoffeeScript 1.6.3
(function() {
  var data, getOpenCountry, initialize, loadCountry, openCountries, removeCountry, removePolygons, renderCountries, renderPolygons, resetCountry, _;

  _ = this._;

  window.data = data = {
    open_countries: []
  };

  openCountries = data.open_countries;

  getOpenCountry = function(name, prop) {
    if (prop == null) {
      prop = 'name';
    }
    return _.find(openCountries, function(c) {
      return c[prop] === name;
    });
  };

  loadCountry = function(c) {
    var country;
    country = getOpenCountry(c.name);
    if (!country) {
      openCountries.push(c);
      return renderCountries();
    }
  };

  $(function() {
    $(document).on('mouseenter', '.tip', function() {
      return $(this).tooltip().tooltip('show');
    });
    return $(document).on('mouseleave', '.tip', function() {
      return $(this).tooltip('hide');
    });
  });

  renderCountries = function() {
    var c, html, index, len, oDiv, _i, _len;
    oDiv = $('#open_countries').empty();
    len = openCountries.length;
    for (index = _i = 0, _len = openCountries.length; _i < _len; index = ++_i) {
      c = openCountries[index];
      html = "<span id='" + c.abbrev + "'>" + c.name + "        <a href='#' class='tip remove' title='remove'>x</a>        <a href='#' class='tip reset' title='reset'>r</a>      </span>";
      if (index + 1 !== len) {
        html += " - ";
      }
      oDiv.append(html);
    }
    return index = _.indexOf(openCountries, c);
  };

  initialize = function() {
    var mapOptions;
    mapOptions = {
      zoom: 3,
      center: new google.maps.LatLng(24.4441, 121.19313333333334),
      mapTypeId: google.maps.MapTypeId.TERRAIN
    };
    return data.map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
  };

  removeCountry = function(c) {
    removePolygons(c);
    openCountries = _.without(openCountries, c);
    return renderCountries();
  };

  removePolygons = function(c) {
    var poly, _i, _len, _ref, _results;
    _ref = c.polygons;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      poly = _ref[_i];
      _results.push(poly.setMap(null));
    }
    return _results;
  };

  resetCountry = function(c) {
    removePolygons(c);
    return renderPolygons(c);
  };

  renderPolygons = function(country) {
    var coords, map, point, poly, polygon, polys, _i, _j, _len, _len1, _ref, _ref1, _results;
    country.polygons = polys = [];
    map = data.map;
    _ref = country.data.polygons;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      poly = _ref[_i];
      coords = [];
      _ref1 = poly.points;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        point = _ref1[_j];
        if (point.length === 2) {
          coords.push(new google.maps.LatLng(point[0], point[1]));
        }
      }
      polygon = {};
      polygon = new google.maps.Polygon({
        map: map,
        paths: coords,
        strokeColor: "#FF0000",
        strokeOpacity: 0.8,
        strokeWeight: 1,
        fillColor: "#FF0000",
        fillOpacity: 0.35,
        draggable: true,
        geodesic: true
      });
      _results.push(polys.push(polygon));
    }
    return _results;
  };

  $(function() {
    var country_names, meta;
    meta = window.meta;
    country_names = _.map(meta, function(c) {
      return c.name;
    });
    $('input').typeahead({
      name: 'countries',
      local: country_names,
      limit: 10
    }).on('typeahead:selected', function(e, selected, dataName) {
      var country, map, target, val;
      target = $(e.currentTarget);
      target.val('');
      val = selected.value;
      map = data.map;
      country = getOpenCountry(val);
      if (!country) {
        country = _.find(meta, function(c) {
          return val === c.name;
        });
        return $.getJSON("public/data/countries/" + country.abbrev + ".json").then(function(resp) {
          country.data = resp;
          renderPolygons(country);
          return loadCountry(country);
        });
      }
    });
    return $('#open_countries').on('click', 'a', function(e) {
      var abbrev, country, target;
      e.preventDefault();
      target = $(e.currentTarget);
      abbrev = target.closest('span').attr('id');
      country = getOpenCountry(abbrev, 'abbrev');
      if (target.hasClass('remove')) {
        return removeCountry(country);
      } else if (target.hasClass('reset')) {
        return resetCountry(country);
      }
    });
  });

  google.maps.event.addDomListener(window, "load", initialize);

}).call(this);
